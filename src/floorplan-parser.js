// @generated by Peggy 5.0.6.
//
// https://peggyjs.org/



  // Helper functions for the parser
  function extractList(head, tail) {
    return [head, ...tail.map(t => t[1])];
  }

  function buildRoom(id, label, dimensions, anchor, attachInfo, offset, children) {
    const room = {
      id: id.toLowerCase(),
      width: dimensions.width,
      depth: dimensions.depth,
      attachTo: `${attachInfo.target}:${attachInfo.anchor}`
    };

    if (label) {
      room.name = label;
    }

    if (anchor) {
      room.anchor = anchor;
    }

    if (offset) {
      room.offset = offset;
    }

    // Process children
    const parts = [];
    const objects = [];

    children.forEach(child => {
      if (child.type === 'part') {
        parts.push(child.data);
      } else if (child.type === 'object') {
        objects.push(child.data);
      }
    });

    if (parts.length > 0) {
      room.parts = parts;
    }

    if (objects.length > 0) {
      room.objects = objects;
    }

    return room;
  }

  function buildPart(id, label, dimensions, anchor, attachInfo, offset, children) {
    const part = {
      id: id.toLowerCase(),
      width: dimensions.width,
      depth: dimensions.depth,
      attachTo: `${attachInfo.target}:${attachInfo.anchor}`
    };

    if (label) {
      part.name = label;
    }

    if (anchor) {
      part.anchor = anchor;
    }

    if (offset) {
      part.offset = offset;
    }

    const objects = children.filter(c => c.type === 'object').map(c => c.data);

    if (objects.length > 0) {
      part.objects = objects;
    }

    return part;
  }

class peg$SyntaxError extends SyntaxError {
  constructor(message, expected, found, location) {
    super(message);
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";
  }

  format(sources) {
    let str = "Error: " + this.message;
    if (this.location) {
      let src = null;
      const st = sources.find(s => s.source === this.location.source);
      if (st) {
        src = st.text.split(/\r\n|\n|\r/g);
      }
      const s = this.location.start;
      const offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
        ? this.location.source.offset(s)
        : s;
      const loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
      if (src) {
        const e = this.location.end;
        const filler = "".padEnd(offset_s.line.toString().length, " ");
        const line = src[s.line - 1];
        const last = s.line === e.line ? e.column : line.length + 1;
        const hatLen = (last - s.column) || 1;
        str += "\n --> " + loc + "\n"
            + filler + " |\n"
            + offset_s.line + " | " + line + "\n"
            + filler + " | " + "".padEnd(s.column - 1, " ")
            + "".padEnd(hatLen, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  }

  static buildMessage(expected, found) {
    function hex(ch) {
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, "unicode")
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
      : null;
    function unicodeEscape(s) {
      if (nonPrintable) {
        return s.replace(nonPrintable,  ch => "\\u{" + hex(ch) + "}");
      }
      return s;
    }

    function literalEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    function classEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class(expectation) {
        const escapedParts = expectation.parts.map(
          part => (Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part))
        );

        return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]" + (expectation.unicode ? "u" : "");
      },

      any() {
        return "any character";
      },

      end() {
        return "end of input";
      },

      other(expectation) {
        return expectation.description;
      },
    };

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = expected.map(describeExpectation);
      descriptions.sort();

      if (descriptions.length > 0) {
        let j = 1;
        for (let i = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  const peg$FAILED = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions = {
    FloorPlan: peg$parseFloorPlan,
  };
  let peg$startRuleFunction = peg$parseFloorPlan;

  const peg$c0 = "grid";
  const peg$c1 = "room";
  const peg$c2 = "at";
  const peg$c3 = "part";
  const peg$c4 = "window";
  const peg$c5 = "door";
  const peg$c6 = "object";
  const peg$c7 = "\"";
  const peg$c8 = "'";
  const peg$c9 = "x";
  const peg$c10 = "top-left";
  const peg$c11 = "top-right";
  const peg$c12 = "bottom-left";
  const peg$c13 = "bottom-right";
  const peg$c14 = "zeropoint";
  const peg$c15 = ":";
  const peg$c16 = "(";
  const peg$c17 = ",";
  const peg$c18 = ")";
  const peg$c19 = "top";
  const peg$c20 = "bottom";
  const peg$c21 = "left";
  const peg$c22 = "right";
  const peg$c23 = "inwards-left";
  const peg$c24 = "inwards-right";
  const peg$c25 = "outwards-left";
  const peg$c26 = "outwards-right";
  const peg$c27 = "opening";
  const peg$c28 = "square";
  const peg$c29 = "circle";
  const peg$c30 = "#";
  const peg$c31 = "-";
  const peg$c32 = "\r\n";

  const peg$r0 = /^[ \t]/;
  const peg$r1 = /^[a-zA-Z]/;
  const peg$r2 = /^[a-zA-Z0-9_]/;
  const peg$r3 = /^[^"]/;
  const peg$r4 = /^[^']/;
  const peg$r5 = /^[0-9a-fA-F]/;
  const peg$r6 = /^[0-9]/;
  const peg$r7 = /^[^\n\r]/;
  const peg$r8 = /^[\n\r]/;

  const peg$e0 = peg$literalExpectation("grid", true);
  const peg$e1 = peg$literalExpectation("room", true);
  const peg$e2 = peg$literalExpectation("at", true);
  const peg$e3 = peg$literalExpectation("part", true);
  const peg$e4 = peg$literalExpectation("window", true);
  const peg$e5 = peg$literalExpectation("door", true);
  const peg$e6 = peg$literalExpectation("object", true);
  const peg$e7 = peg$classExpectation([" ", "\t"], false, false, false);
  const peg$e8 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false, false);
  const peg$e9 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false, false);
  const peg$e10 = peg$literalExpectation("\"", false);
  const peg$e11 = peg$classExpectation(["\""], true, false, false);
  const peg$e12 = peg$literalExpectation("'", false);
  const peg$e13 = peg$classExpectation(["'"], true, false, false);
  const peg$e14 = peg$literalExpectation("x", false);
  const peg$e15 = peg$literalExpectation("top-left", true);
  const peg$e16 = peg$literalExpectation("top-right", true);
  const peg$e17 = peg$literalExpectation("bottom-left", true);
  const peg$e18 = peg$literalExpectation("bottom-right", true);
  const peg$e19 = peg$literalExpectation("zeropoint", true);
  const peg$e20 = peg$literalExpectation(":", false);
  const peg$e21 = peg$literalExpectation("(", false);
  const peg$e22 = peg$literalExpectation(",", false);
  const peg$e23 = peg$literalExpectation(")", false);
  const peg$e24 = peg$literalExpectation("top", true);
  const peg$e25 = peg$literalExpectation("bottom", true);
  const peg$e26 = peg$literalExpectation("left", true);
  const peg$e27 = peg$literalExpectation("right", true);
  const peg$e28 = peg$literalExpectation("inwards-left", true);
  const peg$e29 = peg$literalExpectation("inwards-right", true);
  const peg$e30 = peg$literalExpectation("outwards-left", true);
  const peg$e31 = peg$literalExpectation("outwards-right", true);
  const peg$e32 = peg$literalExpectation("opening", true);
  const peg$e33 = peg$literalExpectation("square", true);
  const peg$e34 = peg$literalExpectation("circle", true);
  const peg$e35 = peg$literalExpectation("#", false);
  const peg$e36 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false, false);
  const peg$e37 = peg$literalExpectation("-", false);
  const peg$e38 = peg$classExpectation([["0", "9"]], false, false, false);
  const peg$e39 = peg$classExpectation(["\n", "\r"], true, false, false);
  const peg$e40 = peg$literalExpectation("\r\n", false);
  const peg$e41 = peg$classExpectation(["\n", "\r"], false, false, false);

  function peg$f0(grid, rooms) {
    const result = { rooms: [] };

    if (grid) {
      result.grid_step = grid;
    }

    // Separate rooms, doors, and windows
    const doors = [];
    const windows = [];

    if (rooms) {
      rooms.forEach(room => {
        if (room && room.room) {
          result.rooms.push(room.room);
          if (room.doors) doors.push(...room.doors);
          if (room.windows) windows.push(...room.windows);
        }
      });
    }

    if (doors.length > 0) {
      result.doors = doors;
    }

    if (windows.length > 0) {
      result.windows = windows;
    }

    return result;
  }
  function peg$f1(step) {
    return step;
  }
  function peg$f2(head, tail) {
    return extractList(head, tail);
  }
  function peg$f3(id, label, dims, anchor, attach, offset, children) {
    const roomId = id.toLowerCase();
    const room = buildRoom(id, label, dims, anchor, attach, offset, children?.children || []);

    // Replace room ID placeholders in doors and windows
    const doors = (children?.doors || []).map(door => {
      if (door && door.room) {
        return {
          ...door,
          room: door.room.replace('{ROOM_ID}', roomId)
        };
      }
      return door;
    }).filter(d => d);

    const windows = (children?.windows || []).map(window => {
      if (window && window.room) {
        return {
          ...window,
          room: window.room.replace('{ROOM_ID}', roomId)
        };
      }
      return window;
    }).filter(w => w);

    return {
      room,
      doors,
      windows
    };
  }
  function peg$f4(items) {
    const children = [];
    const doors = [];
    const windows = [];

    items.forEach(([item]) => {
      if (item.type === 'part') {
        children.push(item);
        if (item.doors) doors.push(...item.doors);
        if (item.windows) windows.push(...item.windows);
      } else if (item.type === 'door') {
        doors.push(item.data);
      } else if (item.type === 'window') {
        windows.push(item.data);
      } else if (item.type === 'object') {
        children.push(item);
      }
    });

    return { children, doors, windows };
  }
  function peg$f5(id, dims, anchor, attach, offset, children) {
    const partId = id.toLowerCase();
    const target = attach.target === 'room' ? 'parent' : attach.target.toLowerCase();
    const attachInfo = { target, anchor: attach.anchor };

    // Convert children.objects array into proper format for buildPart
    const childrenForBuild = (children?.objects || []).map(obj => ({ type: 'object', data: obj }));
    const part = buildPart(id, null, dims, anchor, attachInfo, offset, childrenForBuild);

    // Replace part ID placeholders in doors and windows
    const doors = (children?.doors || []).map(door => {
      if (door && door.room) {
        return {
          ...door,
          room: door.room.replace('{ROOM_ID}', partId)
        };
      }
      return door;
    }).filter(d => d);

    const windows = (children?.windows || []).map(window => {
      if (window && window.room) {
        return {
          ...window,
          room: window.room.replace('{ROOM_ID}', partId)
        };
      }
      return window;
    }).filter(w => w);

    return {
      type: 'part',
      data: part,
      doors,
      windows
    };
  }
  function peg$f6(items) {
    const objects = [];
    const doors = [];
    const windows = [];

    items.forEach(([item]) => {
      if (item.type === 'door') {
        doors.push(item.data);
      } else if (item.type === 'window') {
        windows.push(item.data);
      } else if (item.type === 'object') {
        objects.push(item.data);
      }
    });

    return { objects, doors, windows };
  }
  function peg$f7(width, wall, offset) {
    return {
      type: 'window',
      data: {
        room: `{ROOM_ID}:${wall}`,
        width,
        offset: offset?.[0] || 0
      }
    };
  }
  function peg$f8(width, swing, wall, offset) {
    const door = {
      room: `{ROOM_ID}:${wall}`,
      width,
      swing: swing || 'inwards-left'
    };

    if (swing === 'opening') {
      door.type = 'opening';
      delete door.swing;
    } else {
      door.type = 'normal';
    }

    if (offset) {
      door.offset = offset[0];
    }

    return {
      type: 'door',
      data: door
    };
  }
  function peg$f9(objType, label, dims, color, atClause) {
    const anchor = atClause?.anchor || 'top-left';
    const offset = atClause?.offset;

    const obj = {
      type: objType,
      anchor: anchor,
      roomAnchor: anchor
    };

    if (objType === 'square') {
      obj.width = dims.width;
      obj.height = dims.height;
    } else if (objType === 'circle') {
      obj.width = dims.width;
    }

    if (label) {
      obj.text = label;
    }

    if (color) {
      obj.color = color;
    }

    if (offset) {
      obj.x = offset[0];
      obj.y = offset[1];
    } else {
      obj.x = 0;
      obj.y = 0;
    }

    return {
      type: 'object',
      data: obj
    };
  }
  function peg$f10(width, wall, offset) {
    return {
      type: 'window',
      data: {
        room: `{ROOM_ID}:${wall}`,
        width,
        offset: offset?.[0] || 0
      }
    };
  }
  function peg$f11(width, swing, wall, offset) {
    const door = {
      room: `{ROOM_ID}:${wall}`,
      width,
      swing: swing || 'inwards-left'
    };

    if (swing === 'opening') {
      door.type = 'opening';
      delete door.swing;
    } else {
      door.type = 'normal';
    }

    if (offset) {
      door.offset = offset[0];
    }

    return {
      type: 'door',
      data: door
    };
  }
  function peg$f12(objType, label, dims, color, atClause) {
    const anchor = atClause?.anchor || 'top-left';
    const offset = atClause?.offset;

    const obj = {
      type: objType,
      anchor: anchor,
      roomAnchor: anchor
    };

    if (objType === 'square') {
      obj.width = dims.width;
      obj.height = dims.height;
    } else if (objType === 'circle') {
      obj.width = dims.width; // For circles, width is the diameter
    }

    if (label) {
      obj.text = label;
    }

    if (color) {
      obj.color = color;
    }

    if (offset) {
      obj.x = offset[0];
      obj.y = offset[1];
    } else {
      obj.x = 0;
      obj.y = 0;
    }

    return {
      type: 'object',
      data: obj
    };
  }
  function peg$f13(anchor, offset) {    return { anchor, offset };  }
  function peg$f14(offset) {    return { anchor: 'top-left', offset };  }
  function peg$f15(anchor) {    return { anchor, offset: null };  }
  function peg$f16(first, rest) {    return first + rest.join('');  }
  function peg$f17(chars) {    return chars.join('');  }
  function peg$f18(chars) {    return chars.join('');  }
  function peg$f19(width, depth) {    return { width, depth };  }
  function peg$f20(width, height) {    return { width, height };  }
  function peg$f21(width) {    return { width };  }
  function peg$f22() {    return 'top-left';  }
  function peg$f23() {    return 'top-right';  }
  function peg$f24() {    return 'bottom-left';  }
  function peg$f25() {    return 'bottom-right';  }
  function peg$f26(anchor) {
    return { target: 'zeropoint', anchor: anchor ? anchor[1] : 'top-left' };
  }
  function peg$f27(target, anchor) {
    return { target: target.toLowerCase(), anchor: anchor ? anchor[1] : 'bottom-right' };
  }
  function peg$f28(anchor) {
    return { target: 'room', anchor: anchor ? anchor[1] : 'bottom-right' };
  }
  function peg$f29(target, anchor) {
    return { target: target.toLowerCase(), anchor: anchor ? anchor[1] : 'bottom-right' };
  }
  function peg$f30(x, y) {    return [x, y];  }
  function peg$f31(offset) {    return [offset];  }
  function peg$f32() {    return 'top';  }
  function peg$f33() {    return 'bottom';  }
  function peg$f34() {    return 'left';  }
  function peg$f35() {    return 'right';  }
  function peg$f36() {    return 'inwards-left';  }
  function peg$f37() {    return 'inwards-right';  }
  function peg$f38() {    return 'outwards-left';  }
  function peg$f39() {    return 'outwards-right';  }
  function peg$f40() {    return 'opening';  }
  function peg$f41() {    return 'square';  }
  function peg$f42() {    return 'circle';  }
  function peg$f43(hex) {    return '#' + hex.join('');  }
  function peg$f44(sign, digits) {    return parseInt((sign || '') + digits.join(''), 10);  }
  let peg$currPos = options.peg$currPos | 0;
  let peg$savedPos = peg$currPos;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = peg$currPos;
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
  let peg$silentFails = options.peg$silentFails | 0;

  let peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$getUnicode(pos = peg$currPos) {
    const cp = input.codePointAt(pos);
    if (cp === undefined) {
      return "";
    }
    return String.fromCodePoint(cp);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text, ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
    return { type: "class", parts, inverted, ignoreCase, unicode };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description };
  }

  function peg$computePosDetails(pos) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    const res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseFloorPlan() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseGridSetting();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parse_();
    s4 = peg$parseRoomList();
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    s5 = peg$parse_();
    peg$savedPos = s0;
    s0 = peg$f0(s2, s4);

    return s0;
  }

  function peg$parseGridSetting() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseInteger();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRoomList() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseRoomDefinition();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseRoomDefinition();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseRoomDefinition();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRoomDefinition() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c1) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseLabel();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$parseDimensions();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseAnchor();
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = peg$parse_();
          s11 = input.substr(peg$currPos, 2);
          if (s11.toLowerCase() === peg$c2) {
            peg$currPos += (2);
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            s13 = peg$parseAttachTo();
            if (s13 !== peg$FAILED) {
              s14 = peg$parse__();
              s15 = peg$parseOffset();
              if (s15 === peg$FAILED) {
                s15 = null;
              }
              s16 = peg$parseRoomChildren();
              if (s16 === peg$FAILED) {
                s16 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f3(s3, s5, s7, s9, s13, s15, s16);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRoomChildren() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseEOL();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseRoomChildItem();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseEOL();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseEOL();
        }
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseRoomChildItem();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseEOL();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseEOL();
            }
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f4(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRoomChildItem() {
    let s0;

    s0 = peg$parsePartDefinition();
    if (s0 === peg$FAILED) {
      s0 = peg$parseWindowDefinition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDoorDefinition();
        if (s0 === peg$FAILED) {
          s0 = peg$parseObjectDefinition();
        }
      }
    }

    return s0;
  }

  function peg$parsePartDefinition() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parseSingleIndent();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c3) {
        peg$currPos += (4);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseIdentifier();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseDimensions();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parseAnchor();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parse_();
            s10 = input.substr(peg$currPos, 2);
            if (s10.toLowerCase() === peg$c2) {
              peg$currPos += (2);
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parsePartAttachTo();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse__();
                s14 = peg$parseOffset();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                s15 = peg$parsePartChildren();
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f5(s4, s6, s8, s12, s14, s15);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePartChildren() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseEOL();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsePartChildItem();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseEOL();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseEOL();
        }
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsePartChildItem();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseEOL();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseEOL();
            }
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f6(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePartChildItem() {
    let s0;

    s0 = peg$parsePartWindowDefinition();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePartDoorDefinition();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePartObjectDefinition();
      }
    }

    return s0;
  }

  function peg$parsePartWindowDefinition() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseDoubleIndent();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 6);
      if (s2.toLowerCase() === peg$c4) {
        peg$currPos += (6);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseInteger();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = input.substr(peg$currPos, 2);
          if (s6.toLowerCase() === peg$c2) {
            peg$currPos += (2);
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parseWall();
            if (s8 !== peg$FAILED) {
              s9 = peg$parse__();
              s10 = peg$parseOffset();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f7(s4, s8, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePartDoorDefinition() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseDoubleIndent();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c5) {
        peg$currPos += (4);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseInteger();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseSwing();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          s8 = input.substr(peg$currPos, 2);
          if (s8.toLowerCase() === peg$c2) {
            peg$currPos += (2);
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseWall();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse__();
              s12 = peg$parseOffset();
              if (s12 === peg$FAILED) {
                s12 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f8(s4, s6, s10, s12);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePartObjectDefinition() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseDoubleIndent();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 6);
      if (s2.toLowerCase() === peg$c6) {
        peg$currPos += (6);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseObjectType();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseLabel();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          s8 = peg$parseObjectDimensions();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse___();
            s10 = peg$parseColor();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            s11 = peg$parse___();
            s12 = peg$parseObjectAtClause();
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f9(s4, s6, s8, s10, s12);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWindowDefinition() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseSingleIndent();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 6);
      if (s2.toLowerCase() === peg$c4) {
        peg$currPos += (6);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseInteger();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = input.substr(peg$currPos, 2);
          if (s6.toLowerCase() === peg$c2) {
            peg$currPos += (2);
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parseWall();
            if (s8 !== peg$FAILED) {
              s9 = peg$parse__();
              s10 = peg$parseOffset();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f10(s4, s8, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDoorDefinition() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseSingleIndent();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c5) {
        peg$currPos += (4);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseInteger();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseSwing();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          s8 = input.substr(peg$currPos, 2);
          if (s8.toLowerCase() === peg$c2) {
            peg$currPos += (2);
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseWall();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse__();
              s12 = peg$parseOffset();
              if (s12 === peg$FAILED) {
                s12 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f11(s4, s6, s10, s12);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectDefinition() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseSingleIndent();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 6);
      if (s2.toLowerCase() === peg$c6) {
        peg$currPos += (6);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseObjectType();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseLabel();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          s8 = peg$parseObjectDimensions();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse___();
            s10 = peg$parseColor();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            s11 = peg$parse___();
            s12 = peg$parseObjectAtClause();
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f12(s4, s6, s8, s10, s12);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectAtClause() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c2) {
      peg$currPos += (2);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAnchor();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseOffset();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f13(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 2);
      if (s1.toLowerCase() === peg$c2) {
        peg$currPos += (2);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseOffset();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 2);
        if (s1.toLowerCase() === peg$c2) {
          peg$currPos += (2);
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseAnchor();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = input.charAt(peg$currPos);
            if (peg$r0.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = undefined;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f15(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseIdentifier() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r1.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r2.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r2.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f16(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLabel() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c7;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r3.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r3.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f17(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c8;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = input.charAt(peg$currPos);
        if (peg$r4.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r4.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c8;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f18(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDimensions() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 120) {
        s2 = peg$c9;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseInteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f19(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectDimensions() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 120) {
        s2 = peg$c9;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseInteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseInteger();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f21(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseAnchor() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 8);
    if (s1.toLowerCase() === peg$c10) {
      peg$currPos += (8);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 9);
      if (s1.toLowerCase() === peg$c11) {
        peg$currPos += (9);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f23();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 11);
        if (s1.toLowerCase() === peg$c12) {
          peg$currPos += (11);
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f24();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 12);
          if (s1.toLowerCase() === peg$c13) {
            peg$currPos += (12);
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f25();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseAttachTo() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 9);
    if (s1.toLowerCase() === peg$c14) {
      peg$currPos += (9);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c15;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseAnchor();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f26(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c15;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchor();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f27(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsePartAttachTo() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c1) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c15;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseAnchor();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f28(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c15;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchor();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f29(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseOffset() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseInteger();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c17;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseInteger();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c18;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c16;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseInteger();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s5 = peg$c18;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f31(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseWall() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c19) {
      peg$currPos += (3);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f32();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 6);
      if (s1.toLowerCase() === peg$c20) {
        peg$currPos += (6);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f33();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c21) {
          peg$currPos += (4);
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f34();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 5);
          if (s1.toLowerCase() === peg$c22) {
            peg$currPos += (5);
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e27); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f35();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseSwing() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 12);
    if (s1.toLowerCase() === peg$c23) {
      peg$currPos += (12);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f36();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 13);
      if (s1.toLowerCase() === peg$c24) {
        peg$currPos += (13);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f37();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 13);
        if (s1.toLowerCase() === peg$c25) {
          peg$currPos += (13);
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f38();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 14);
          if (s1.toLowerCase() === peg$c26) {
            peg$currPos += (14);
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e31); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f39();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 7);
            if (s1.toLowerCase() === peg$c27) {
              peg$currPos += (7);
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f40();
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseObjectType() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c28) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 6);
      if (s1.toLowerCase() === peg$c29) {
        peg$currPos += (6);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f42();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseColor() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r5.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r5.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f43(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInteger() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r6.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r6.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f44(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    let s0, s1;

    s0 = [];
    s1 = peg$parseWhitespace();
    if (s1 === peg$FAILED) {
      s1 = peg$parseComment();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEOL();
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseComment();
        if (s1 === peg$FAILED) {
          s1 = peg$parseEOL();
        }
      }
    }

    return s0;
  }

  function peg$parse__() {
    let s0, s1;

    s0 = [];
    s1 = peg$parseWhitespace();
    if (s1 === peg$FAILED) {
      s1 = peg$parseComment();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseComment();
      }
    }

    return s0;
  }

  function peg$parse___() {
    let s0, s1;

    s0 = [];
    s1 = peg$parseWhitespace();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhitespace();
    }

    return s0;
  }

  function peg$parseWhitespace() {
    let s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r0.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r0.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSingleIndent() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r0.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r0.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = input.charAt(peg$currPos);
      if (peg$r0.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (peg$r0.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = input.charAt(peg$currPos);
      if (peg$r0.test(s6)) {
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s1 = [s1, s2, s3, s4, s5];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDoubleIndent() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r0.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r0.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s2 !== peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (peg$r0.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = input.charAt(peg$currPos);
          if (peg$r0.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = input.charAt(peg$currPos);
              if (peg$r0.test(s5)) {
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComment() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r7.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r7.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    let s0;

    if (input.substr(peg$currPos, 2) === peg$c32) {
      s0 = peg$c32;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.charAt(peg$currPos);
      if (peg$r8.test(s0)) {
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);
  function peg$throw() {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos,
      peg$success,
      peg$throw: peg$success ? undefined : peg$throw,
    });
  }
  if (peg$success) {
    return peg$result;
  } else {
    peg$throw();
  }
}

const peg$allowedStartRules = [
  "FloorPlan"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
